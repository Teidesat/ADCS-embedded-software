#include <math.h>
#include <Wire.h>
#include <Adafruit_LSM9DS1.h>
#include <Adafruit_Sensor.h>  // not used in this demo but required!


Adafruit_LSM9DS1 lsm = Adafruit_LSM9DS1();

float tiltXrollGyroDeg = 0;
float tiltYpitchGyroDeg = 0;
float tiltZYawGyroDeg = 0;

float tiltXrollDeg = 0;
float tiltYpitchDeg = 0;
float tiltZyawDeg = 0;

float deltaTime;
unsigned long int millisOld;
float milisecondsToSeconds = 1000.0;

void setupSensor() {
  // 1.) Set the accelerometer range
  lsm.setupAccel(lsm.LSM9DS1_ACCELRANGE_2G);
  //lsm.setupAccel(lsm.LSM9DS1_ACCELRANGE_4G);
  //lsm.setupAccel(lsm.LSM9DS1_ACCELRANGE_8G);
  //lsm.setupAccel(lsm.LSM9DS1_ACCELRANGE_16G);
  
  // 2.) Set the magnetometer sensitivity
  lsm.setupMag(lsm.LSM9DS1_MAGGAIN_4GAUSS);
  //lsm.setupMag(lsm.LSM9DS1_MAGGAIN_8GAUSS);
  //lsm.setupMag(lsm.LSM9DS1_MAGGAIN_12GAUSS);
  //lsm.setupMag(lsm.LSM9DS1_MAGGAIN_16GAUSS);

  // 3.) Setup the gyroscope
  lsm.setupGyro(lsm.LSM9DS1_GYROSCALE_245DPS);
  //lsm.setupGyro(lsm.LSM9DS1_GYROSCALE_500DPS);
  //lsm.setupGyro(lsm.LSM9DS1_GYROSCALE_2000DPS);

  // get delta time
  millisOld = millis();
}

void setup() {
  Serial.begin(9600);
  while(!Serial) {delay(1);} // will pause Zero, Leonardo, etc until serial console opens
  Serial.println("LSM9DS1 data read demo");
  
  // Try to initialise and warn if we couldn't detect the chip
  if(!lsm.begin()) {
    Serial.println("Oops ... unable to initialize the LSM9DS1. Check your wiring!");
    while (1);
  }
  Serial.println("Found LSM9DS1 9DOF");

  // helper to just set the default scaling we want, see above!
  setupSensor();
}

void loop() {
  lsm.read();  /* ask it to read in the data */ 

  /* Get a new sensor event */ 
  sensors_event_t accelerometers, magnetometers, gyroscopes, temperature;
  lsm.getEvent(&accelerometers, &magnetometers, &gyroscopes, &temperature);

  // raw sensor data
  String rawAccelerometersStr = String(accelerometers.acceleration.x) + ',' + String(accelerometers.acceleration.y) + ',' + String(accelerometers.acceleration.z);
  String rawMagnetometersStr = String(magnetometers.magnetic.x) + ',' + String(magnetometers.magnetic.y) + ',' + String(magnetometers.magnetic.z);
  String rawGyroscopesStr = String(gyroscopes.gyro.x) + ',' + String(gyroscopes.gyro.y) + ',' + String(gyroscopes.gyro.z);
  String rawDataStr = rawAccelerometersStr + ',' + rawGyroscopesStr + ',' + rawMagnetometersStr;
  
  // calculate tilt on x,y,z axis with accelerometers
  float tiltXrollAccelRad = atan2(accelerometers.acceleration.x, accelerometers.acceleration.z);
  float tiltXrollAccelDeg = tiltXrollAccelRad * (180.0 / M_PI);
  float tiltYpitchAccelRad = atan2(accelerometers.acceleration.y, accelerometers.acceleration.z);
  float tiltYpitchAccelDeg = tiltYpitchAccelRad * (180.0 / M_PI);
  float tiltZyawAccelRad = atan2(accelerometers.acceleration.y, accelerometers.acceleration.x);
  float tiltZyawAccelDeg = tiltZyawAccelRad * (180.0 / M_PI);
  String tiltDataAccelerometersStr = String(tiltXrollAccelDeg) + ',' + String(tiltYpitchAccelDeg) + ',' + String(tiltZyawAccelDeg);


  // calculate tilt on x,y,z axis with gyroscopes
  deltaTime = (millis() - millisOld) / milisecondsToSeconds;
  millisOld = millis();
  tiltXrollGyroDeg = tiltXrollGyroDeg + gyroscopes.gyro.x * deltaTime;
  tiltYpitchGyroDeg = tiltYpitchGyroDeg + gyroscopes.gyro.y * deltaTime;
  tiltZYawGyroDeg = tiltZYawGyroDeg + gyroscopes.gyro.z * deltaTime;
  String tiltDataGyroscopesStr = String(tiltXrollGyroDeg) + ',' + String(tiltYpitchGyroDeg) + ',' + String(tiltZYawGyroDeg);

  // calculate tilt on x,y,z axis combining accelerometers and gyroscopes
  tiltXrollDeg = (tiltXrollDeg + gyroscopes.gyro.x * deltaTime) * 0.9 + tiltXrollAccelDeg * 0.1;
  tiltYpitchDeg = (tiltYpitchDeg + gyroscopes.gyro.y * deltaTime) * 0.9 + tiltYpitchAccelDeg * 0.1;
  tiltZyawDeg = (tiltZyawDeg + gyroscopes.gyro.z * deltaTime) * 0.95 + tiltZyawAccelDeg * 0.05;

  String tiltDataAccelGyroStr = String(tiltXrollDeg) + ',' + String(tiltYpitchDeg);// + ',' + String(tiltZyawDeg);

  // caclculate heading using magnetometer
  float heading = 90.0 - atan(magnetometers.magnetic.x / magnetometers.magnetic.y) * 180.0 * M_PI;

  // print all data
  String dataStr = /*rawDataStr + ',' + tiltDataAccelerometersStr + ',' + tiltDataGyroscopesStr  + ',' +*/ tiltDataAccelGyroStr /*+ ',' + String(heading)*/;
  Serial.println(dataStr);


  delay(150);
}