#include <string>

#include <Wire.h>
#include <Adafruit_LSM9DS1.h>
#include "adafruit/MadgwickAHRS.h"

#define RATE 9

Adafruit_LSM9DS1 lsm = Adafruit_LSM9DS1();
Madgwick attitude;

unsigned long microsPerReading, microsPrevious;

void setupSensor() {
  lsm.setupAccel(lsm.LSM9DS1_ACCELRANGE_2G);
  lsm.setupMag(lsm.LSM9DS1_MAGGAIN_4GAUSS);
  lsm.setupGyro(lsm.LSM9DS1_GYROSCALE_245DPS);
}



void setup() {
  Serial.begin(9600);
  while(!Serial) {delay(1);} // will pause Zero, Leonardo, etc until serial console opens
  Serial.println("LSM9DS1 data read demo");

  Serial.println(__cplusplus);
  
  // Try to initialise and warn if we couldn't detect the chip
  if(!lsm.begin()) {
    Serial.println("Oops ... unable to initialize the LSM9DS1. Check your wiring!");
    while (1);
  }
  Serial.println("Found LSM9DS1 9DOF");

  // helper to just set the default scaling we want, see above!
  setupSensor();

  attitude.begin(RATE);

  microsPerReading = 1000000 / RATE;
  microsPrevious = micros();
}



float convertRawAcceleration(int aRaw) {
  // since we are using 2G range
  // -2g maps to a raw value of -32768
  // +2g maps to a raw value of 32767
  
  float a = (aRaw * 2.0) / 32768.0;
  return a;
}

float convertRawGyro(int gRaw) {
  // since we are using 250 degrees/seconds range
  // -250 maps to a raw value of -32768
  // +250 maps to a raw value of 32767
  
  float g = (gRaw * 250.0) / 32768.0;
  return g;
}



void loop() {
  sensors_event_t accelerometers, magnetometers, gyroscopes, temperature;
  lsm.getEvent(&accelerometers, &magnetometers, &gyroscopes, &temperature);
  
  unsigned long microsNow = micros();
  
  if (microsNow - microsPrevious >= microsPerReading) {
    float accelsRawXYZ[3] = {accelerometers.acceleration.x, accelerometers.acceleration.y, accelerometers.acceleration.z};
    float gyrosRawXYX[3] = {gyroscopes.gyro.x, gyroscopes.gyro.y, gyroscopes.gyro.z};
    float magsRawXYZ[3] = {magnetometers.magnetic.x, magnetometers.magnetic.y, magnetometers.magnetic.z};

    float ax = convertRawAcceleration(accelsRawXYZ[0]);
    float ay = convertRawAcceleration(accelsRawXYZ[1]);
    float az = convertRawAcceleration(accelsRawXYZ[2]);
    float gx = convertRawGyro(gyrosRawXYX[0]);
    float gy = convertRawGyro(gyrosRawXYX[1]);
    float gz = convertRawGyro(gyrosRawXYX[2]);

    //attitude.update(gyrosRawXYX[0], gyrosRawXYX[1], gyrosRawXYX[2], accelsRawXYZ[0], accelsRawXYZ[1], accelsRawXYZ[2], magsRawXYZ[0], magsRawXYZ[1], magsRawXYZ[2]);
    //String result = String(attitude.getPitch()) + ' ' + String(attitude.getRoll()) + ' ' + String(attitude.getYaw());
    attitude.updateIMU(gx, gy, gz, ax, ay, az);

    float roll = attitude.getRoll();
    float pitch = attitude.getPitch();
    float heading = attitude.getYaw();
    String result = String(pitch) + ' ' + String(roll) + ' ' + String(heading);
    Serial.println(result);

    microsPrevious = microsPrevious + microsPerReading;
  }

  delay(150);
}