//main-upsat.txt

#include "hardware_interface/hardware_interface.hpp"
#include "noise_filters/noise_filters.hpp"
#include "algorithms/upsat/WahbaRotM.hpp"



// constants
float loopFreq = 100;
float loopPeriod = 1 / loopFreq;

const int bufferSize = 20;

// LSM9DS1 object, noise filters and upsat algorithm structs
NoiseFilters noiseFiltersAccX, noiseFiltersAccY, noiseFiltersAccZ, noiseFiltersGyroX, noiseFiltersGyroY, noiseFiltersGyroZ, noiseFiltersMagX, noiseFiltersMagY, noiseFiltersMagZ;
sensorDat sensorData;
WahbaRotMStruct WStructRaw, WStructAverage;



void setup() {
  // set up sensors and upsat algorithm main struct
  setupHardware();
  initWahbaStruct(&WStructRaw, loopPeriod);
  initWahbaStruct(&WStructAverage, loopPeriod);
}

void loop() {
  // get data from sensors
  IMUdata imuRawValues = readSensors();
  String rawDataStr = formatIMUvalues(imuRawValues);


  // average sensor data
  IMUdata imuAverageValues = imuRawValues;
  
  //imuAverageValues.accelerometers.x = noiseFiltersAccX.updateMovingAverage(imuRawValues.accelerometers.x);
  //imuAverageValues.accelerometers.y = noiseFiltersAccY.updateMovingAverage(imuRawValues.accelerometers.y);
  //imuAverageValues.accelerometers.z = noiseFiltersAccZ.updateMovingAverage(imuRawValues.accelerometers.z);

  //imuAverageValues.magnetometers.x = noiseFiltersGyroX.updateMovingAverage(imuRawValues.gyroscopes.x);
  //imuAverageValues.magnetometers.y = noiseFiltersGyroY.updateMovingAverage(imuRawValues.gyroscopes.y);
  //imuAverageValues.magnetometers.z = noiseFiltersGyroZ.updateMovingAverage(imuRawValues.gyroscopes.z);

  //imuAverageValues.magnetometers.x = noiseFiltersMagX.updateMovingAverage(imuRawValues.magnetometers.x);
  //imuAverageValues.magnetometers.y = noiseFiltersMagY.updateMovingAverage(imuRawValues.magnetometers.y);
  //imuAverageValues.magnetometers.z = noiseFiltersMagZ.updateMovingAverage(imuRawValues.magnetometers.z);

  // calculate attitude using upsat algorithm
  
  // raw pitch, roll and yaw
  float accsRaw[3] = {imuRawValues.accelerometers.x, imuRawValues.accelerometers.y, imuRawValues.accelerometers.z};
  float gyrosRaw[3] = {imuRawValues.gyroscopes.x, imuRawValues.gyroscopes.y, imuRawValues.gyroscopes.z};
  float magsRaw[3] = {imuRawValues.magnetometers.x, imuRawValues.magnetometers.y, imuRawValues.magnetometers.z};

  sensorDat sensorRawData = scaleSens(accsRaw, gyrosRaw, magsRaw);
  WahbaRotM(sensorRawData.Acc, sensorRawData.Gyr, sensorRawData.Mag, &WStructRaw);

  Attitude currentAttitudeRawRadians = fillAttitudeValues(WStructRaw.Euler[0], WStructRaw.Euler[1], WStructRaw.Euler[2]);
  Attitude currentAttitudeRawDegrees = convertAttitudeRadiansToDegrees(currentAttitudeRawRadians);
  String attitudeRawDegreesStr = formatAttitudeValues(currentAttitudeRawDegrees);
  String pitchAndRollRawDegreesStr = formatPitchandRoll(currentAttitudeRawDegrees);
  
  // average pith, roll and yaw
  //float accAvererage[3] = {imuAverageValues.accelerometers.x, imuAverageValues.accelerometers.y, imuAverageValues.accelerometers.z};
  //float gyroAverage[3] = {imuAverageValues.gyroscopes.x, imuAverageValues.gyroscopes.y, imuAverageValues.gyroscopes.z};
  //float magsAverage[3] = {imuAverageValues.magnetometers.x, imuAverageValues.magnetometers.y, imuAverageValues.magnetometers.z};
  //
  //sensorDat sensorAverageData = scaleSens(accAvererage, gyroAverage, magsAverage);
  //WahbaRotM(sensorAverageData.Acc, sensorAverageData.Gyr, sensorAverageData.Mag, &WStructAverage);
  
  Serial.println(pitchAndRollRawDegreesStr);
} 