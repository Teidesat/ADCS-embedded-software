%% File : codeImporter.tlc
%% Created : Wed Jun 11 19:53:01 2025
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "codeImporter.cpp".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  codeImporter "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) void
    %assign doubleType = LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)

  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    %assign hFileName = "codeImporter_accel_wrapper"
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    %<LibEmitPlatformTypeIncludes()>
    #endif
    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif
    SFB_EXTERN_C void codeImporter_Outputs_wrapper_accel(const %<doubleType> *u0,
			%<doubleType> *y0);
    #undef SFB_EXTERN_C
    #endif
    %closefile hFile

    %assign cFileName = "codeImporter_accel_wrapper"
    %openfile cFile = "%<cFileName>.cpp"
    %selectfile cFile
    #include <string.h>
    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    %<LibEmitPlatformTypeIncludes()>
    #endif
    #include "%<hFileName>.h"
    

    extern void codeImporter_Start_wrapper(void);
    extern void codeImporter_Outputs_wrapper(const %<doubleType> *u0,
			%<doubleType> *y0);
    extern void codeImporter_Terminate_wrapper(void);
    void codeImporter_Outputs_wrapper_accel(const %<doubleType> *u0,
			%<doubleType> *y0){
    codeImporter_Outputs_wrapper(u0,
			y0);
    }

    %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>

  %else
    %assign hFileName = "codeImporter_cgen_wrapper"
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    %<LibEmitPlatformTypeIncludes()>
    #endif
    
    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif
    SFB_EXTERN_C void codeImporter_Outputs_wrapper_cgen(const %<doubleType> *u0,
			%<doubleType> *y0);
    #undef SFB_EXTERN_C
    #endif
    %closefile hFile

    %assign cFileName = "codeImporter_cgen_wrapper"
    %openfile cFile = "%<cFileName>.cpp"
    %selectfile cFile
    #include <string.h>
    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    %<LibEmitPlatformTypeIncludes()>
    #endif
    #include "%<hFileName>.h"

	extern void codeImporter_Outputs_wrapper(const %<doubleType> *u0,
			%<doubleType> *y0);
	 void codeImporter_Outputs_wrapper_cgen(const %<doubleType> *u0,
			%<doubleType> *y0) {
	codeImporter_Outputs_wrapper(u0,
			y0);
	}
    %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>

  %openfile externs

    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif

    SFB_EXTERN_C void codeImporter_Start_wrapper(void);

    SFB_EXTERN_C void codeImporter_Outputs_wrapper(const %<doubleType> *u0,
			%<doubleType> *y0);

    SFB_EXTERN_C void codeImporter_Terminate_wrapper(void);

    #undef SFB_EXTERN_C
  %closefile externs
  %<LibCacheExtern(externs)>

  %endif
  %%
%endfunction


%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    codeImporter_Outputs_wrapper_accel(%<pu0>, %<py0>);
  %else
    codeImporter_Outputs_wrapper_cgen(%<pu0>, %<py0>);
  %endif

  %%
%endfunction


%% [EOF] codeImporter.tlc

